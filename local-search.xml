<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【学习】hexo+fluid博客在github及个人远程服务器的部署</title>
    <link href="/2024/08/23/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/08/23/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <blockquote><p>理论学习和动手实践是个相互纠缠穿插，贯穿始终并最终归于统一的过程</p></blockquote>          </div><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>大一的暑假，也就是2024年的7月底左右，我开始了建立自己博客网站的实践。在此之前，我对相关的知识可以说是一无所知。最初当然是在网上搜素各种教程，了解到了Hexo。但是教程只能解决一部分问题，并且随着相关程序的更新迭代以及不同系统存在的差异，几乎在每个阶段我都遇到了问题。<span class="label label-success">在这里我想感谢2206 kai_Ker学长，浏览学长的博客使我有了建立自己博客网站的想法，在我遇到问题难以解决时，学长很耐心地帮助我，让我对相应知识的理解更加深刻，再次感谢学长！</span>本篇我将把自己的建站过程进行梳理，对于难以解决的问题提供解决方案，希望可以帮到同样想要建站或建站过程中遇到和我相同问题的伙伴。</p><div class="note note-info">            <blockquote><p>相关知识：Hexo，git，Nodejs，Fluid，GitHub Pages，Linux，Ubuntu，nginx</p></blockquote>          </div><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><div class="note note-info">            <blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。 Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote>          </div><p>我们平时在浏览器中看到的网页都是由<code>html</code>这种超文本标记语言编写的，而Hexo可以理解为为我们搭建了一个可以拿过来就用的框架，并将我们用<a href="http://daringfireball.net/projects/markdown/"><code>Markdown</code></a>（Markdown语言可点击链接阅读官方文档自行学习）这种轻量化的，简单的标记语言写成的文章渲染为html代码，呈现为网页填充在已经为我们准备好的框架里。</p><h2 id="运行环境和安装"><a href="#运行环境和安装" class="headerlink" title="运行环境和安装"></a>运行环境和安装</h2><p>Hexo需要配置<a href="https://git-scm.com/"><code>Git</code></a>和<a href="https://nodejs.org/zh-cn"><code>Nodejs</code></a>环境（建议安装最新版本,安装教程均可自行搜索，注意勾选Add to PATH等类似选项，这样可以免去自行配置环境变量等麻烦）。Git是一种分布式的版本管理工具，可以理解为一个公司的技术人员共同开发一个程序，他们所写的代码所做的改动可能都是同时进行的，Git便是解决这种问题的版本管理工具。Nodejs是一种Javascript运行环境，同时Nodejs自带的<code>npm</code>程序包管理工具可以方便地让我们安装各种依赖（可以简单理解为类似应用商店。<br>配置好Git和Nodejs环境后，我们可以在自己的本地硬盘上新建一个hexo目录，如D:&#x2F;hexo。打开目录，右键选择<code>Git Bash Here</code>即可打开Git命令行界面。<br>检查Git版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ Git --version<br></code></pre></td></tr></table></figure><p>检查npm版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm -v<br></code></pre></td></tr></table></figure><p>检查Nodejs版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ node -v<br></code></pre></td></tr></table></figure><p><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p1.png" alt="示例"><br>如果成功出现以上界面，则说明环境配置成功。运行以下命令安装hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>（<code>-g</code>表示全局安装，<code>cli</code>为<code>Command-Line Interface</code>即命令行界面之意）<br>安装完成后输入以下命令检查版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo -v<br></code></pre></td></tr></table></figure><p><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p2.png" alt="示例"><br>接下来进行初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init<br></code></pre></td></tr></table></figure><p>此时我们的文件夹内会出现很多文件<br><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p3.png" alt="仓库下的文件"><br>输入以下指令进行缓存释放和页面渲染</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean&amp;&amp;hexo g<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>此时我们发现文件夹下多了<span class="label label-info">public</span>文件夹,注意此文件夹为呈现的网页文件的根目录，即一切资源均从<span class="label label-info">public</span>文件夹开始寻找。故建议在<span class="label label-info">source</span>文件夹下建立<span class="label label-info">&#x2F;img</span>文件夹储存博客文章中的图片，插入图片格式例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">![<span class="hljs-string">插入图片示例</span>](<span class="hljs-link">/img/example.jpg</span>)<br></code></pre></td></tr></table></figure>          </div><p>至此，网页文件已经渲染成功，我们输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><p>即可打开本地服务器，打开<code>http://localhost:4000/</code>即可在本地预览网页内容。</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><div class="note note-info">            <p>Hexo框架有很多可供选择的主题，选择自己喜欢的主题，参考相应用户使用文档完成配置即可。以下以Fluid主题为例。</p>          </div><p>在Git命令行界面输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>之后创建文件_config.fluid.yml，将主题的[<code>_config.yml</code>](<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">hexo-theme-fluid&#x2F;_config.yml at master · fluid-dev&#x2F;hexo-theme-fluid (github.com)</a>)文件内容复制进去即可。完成后如下修改目录下的_config.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><div class="note note-danger">            <p>注意<code>.yml</code>文件缩进，冒号后应有一空格</p>          </div><p>修改完成后创建<span class="label label-info">关于页</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page about<br></code></pre></td></tr></table></figure><p>创建后修改<code>/source/about/index.md</code>,添加<code>layout</code>属性:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 标题<br>date: 2024-xx-xx xx:xx:xx<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>正文<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>注意：不设置关于页的layout属性会无法显示布局</p>          </div><div class="note note-info">            <p>主题的自定义配置可参考<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册 (fluid-dev.com)</a></p>          </div><hr><blockquote><p><strong>至此我们完成了hexo的本地配置和主题美化，下面我们介绍如何将本地文件推送至Github Pages和远程服务器</strong></p></blockquote><hr><div class="note note-primary">            <p>为了让别人能看到我们的博客，我们需要有自己的站点。Github Pages和云服务器都是为了解决我们的这一需求。可以认为Github Pages为我们免费提供了一个站点，我们可以将自己的静态网页托管到Github，其他用户通过Github为我们提供的指定的<code>username.github.io</code>来访问我们的静态网页。当然，我们也可以购买自己的云服务器，通过Nginx等方式反向代理来呈现我们的网页。相比于Github Pages，通过国内云服务器的访问连接的稳定性和速度都会更好，当然在操作和配置上可能也会稍微麻烦一点。</p>          </div><h1 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h1><p>首先我们需要一个Github账户，自行注册即可。下文涉及的<code>username</code>即为注册时的用户名。（<span class="label label-warning">国内网络访问Github连接稳定性随缘，包括前面的步骤hexo init等操作，需要在Github上将仓库资源Pull到本地，都可能因为网络问题导致失败，可以多尝试几次，也可以尝试代理方法...</span>）</p><h2 id="本地连接Github"><a href="#本地连接Github" class="headerlink" title="本地连接Github"></a>本地连接Github</h2><p>注册账户之后，我们怎么将本地电脑与Github相连接呢？这里我们采用<span class="label label-info">SSH连接</span>的方式。通俗来讲，我们有锁（公钥）和对应的钥匙（私钥）。我们可以把锁（公钥）交给别人，这是可以公开的，但是钥匙（私钥）必须保密，只能掌握在我们自己手里。当我们手中的钥匙和别人手中的锁可以匹配时，即可连接成功。<span class="label label-warning">注意：同一公钥可以重复使用，相当于我们的钥匙可以开很多纹路相同的锁，只要私钥不被泄露，是没有问题的</span></p><h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><p>这里我们先为Git配置用户名和邮箱，是对Git的操作。打开Git命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$git</span> config --global user.name <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-comment"># 这里username输入自己的用户名，不必须但建议与自己的Github用户名保持一致</span><br><span class="hljs-variable">$git</span> config --global user.email <span class="hljs-string">&quot;user@example.com&quot;</span> <span class="hljs-comment"># 这里user@example.com输入自己的邮箱，同上</span><br></code></pre></td></tr></table></figure><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>我们通过<code>win</code>+<code>R</code>，输入<code>cmd</code>打开命令行（区别于Git Bash Here打开的Git命令行，称为命令行），输入以下命令产生公钥和私钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -C <span class="hljs-string">&quot;Github邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>这里<code>-C “user@example.com”</code>为注释（Comment），添加在私钥文件中，可以辅助Github更好地识别私钥，可以省略。</p></blockquote><p>出现的选项均回车即可（选择密钥位置，私钥使用密码，确认私钥使用密码，均回车后密钥保存在默认位置，使用私钥不需要密码）。然后我们打开<code>C:\Users\用户名\.ssh</code>目录，勾选“显示隐藏项目”后，出现：<br><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p4.png" alt=".ssh目录"><br>记事本打开<code>id_rsa.pub</code>文件后复制文件内容</p><h3 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h3><p>进入Github主页，点击Settings</p><blockquote><p>题外话，我在预载《黑神话：悟空》的时候，忘记关闭代理，导致我的代理流量跑光，所以我在写这篇博客的时候也遇到了Github难以进入的问题，所以我选择用当初为了加速Steam安装的加速器Watt Toolkit（Steam++）加速Github，我觉得可以算是羊毛出在羊身上了。</p></blockquote><p><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p5.png" alt="Github"><br>点击SSH and GPG keys<br><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p6.png" alt="Github"><br>点击New SSH key<br><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p7.png" alt="Github"><br>Title随便取，Key type选择Authentication Key，Key中内容粘贴之前复制的id_rsa.pub文件内容即可。<br>保存后在命令行输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>输入后出现“Are you sure you want to continue connecting”，输入“yes”即可。连接成功后出现以下提示：<br><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p8.png" alt="连接成功"></p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>点击Repository，点击新建仓库<br><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p9.png" alt="Repository"><br>新建仓库界面注意：</p><ul><li>Repository Name必须是<code>用户名.github.io</code>，这是Github为我们准备好的特殊仓库名称。</li><li>仓库类型选择<code>Public</code></li><li>勾选Add a README file<br><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p10.png" alt="Repository"><div class="note note-warning">            <p>处于文明及历史原因，Github新建仓库默认分支现名为<code>main</code>，替代之前的<code>master</code>。</p>          </div><blockquote><p>至此我们的仓库创建成功</p></blockquote></li></ul><h2 id="静态网站文件推送至Github远程仓库"><a href="#静态网站文件推送至Github远程仓库" class="headerlink" title="静态网站文件推送至Github远程仓库"></a>静态网站文件推送至Github远程仓库</h2><p>我们首先安装hexo部署插件，在hexo目录下打开Git命令行，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>打开hexo目录下的<code>_config.yml</code>文件，修改配置：<br><img src="/img/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91hexo-fluid%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%83%A8%E7%BD%B2/p11.png" alt="deploy配置"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>其中<code>type</code>为配置类型，<code>repo</code>为仓库位置，这里我们已经通过SSH连接，<code>branch</code>为提交分支，我们选择Github默认的<code>main</code>分支。<br>配置完成后保存退出，在hexo目录打开Git命令行，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo d<br></code></pre></td></tr></table></figure><p>打开网址<code>username.github.io</code>，刷新一下即可看到博客网页。</p><hr><blockquote><p>至此我们已可以通过<code>username.github.io</code>访问我们的博客网页，目前仍然是0成本。下面介绍的在远程云服务器上部署博客网页需要购买云服务器和域名，并且需要进行Linux系统上的命令行操作。</p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>git</tag>
      
      <tag>Nodejs</tag>
      
      <tag>Fluid</tag>
      
      <tag>Github Pages</tag>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>nginx</tag>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【随笔】建站</title>
    <link href="/2024/08/06/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E5%BB%BA%E7%AB%99/"/>
    <url>/2024/08/06/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E5%BB%BA%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="最初"><a href="#最初" class="headerlink" title="最初"></a>最初</h1><blockquote><p><strong>我想把某些瞬间写下来</strong></p></blockquote><h2 id="对技术的好奇"><a href="#对技术的好奇" class="headerlink" title="对技术的好奇"></a>对技术的好奇</h2><p>一个偶然的机会，我在搜索引擎中发现了学长的博客。第一反应是，震撼，这个词我觉得并不夸张。然后，很精致的背景图片，一段话，从打字机中跳出来，就像一片静谧的花园，花园的主人浇灌着自己的喜欢的花。路过的人喜欢的话就翻翻看看，没有人停下也没事，独自欣赏就好了。我想，我也想有自己的博客。</p><h2 id="思想的储藏室"><a href="#思想的储藏室" class="headerlink" title="思想的储藏室"></a>思想的储藏室</h2><p>之前常常怀疑自己是不是有些过度思考的倾向，于是便有意识地去回避思考。上了大学，又觉得自己是不是每天思考太少，时间和精力很多都用来处理生活的一些琐碎和意义不大的事情。思考不应该被回避，不应该被忽略。虽然每个阶段的所思所想局限于截止当时的见识，处境，但是这并不是没有意义的。就像摄影，按下快门定格瞬间。每个阶段的思考，放在人生的长度来看，无非也就某些瞬间。我想把某些瞬间写下来。</p><h1 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h1><blockquote><p><strong>道阻且长，行则将至</strong></p></blockquote><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>搭建过程其实也就是在网上找找教程，一步一步跟着来。总会有问题的，那就把报错复制下来，百度，问GPT，总有解决办法的。我采用的是常见的hexo框架。暑假做家教之余，就每天一点一点慢慢学慢慢搞，nodejs和git，Markdown，部署github pages静态网页，Linux…每部分涉及到的内容，一开始都是不理解的，跟着教程走，只缘身在此山中；走着走着，理解就会更深，视角就会更广，横看成岭侧成峰。这种感觉还是挺不错的。未来会学更多的东西，不过我觉得，道阻且长，行则将至。</p><h2 id="希望"><a href="#希望" class="headerlink" title="希望"></a>希望</h2><p>搭建博客是一次性的工作，写博客是持久性的工作。我的域名购买了10年，当然也是因为这样买更便宜，我希望自己能在日常的疲惫和琐碎中脱离出来一会儿，摆脱浮躁的社会和人心，静下来，就是这样写一些什么，打理打理自己的花园。后面我会在这里更新自己的学习总结和生活随笔，嘟囔一些碎碎念。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
